# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the "main" branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Create and configure a Workload Identity Provider for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Change the values for the GAR_LOCATION, GKE_ZONE, GKE_CLUSTER, IMAGE, REPOSITORY and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke-kustomize

name: Call GKE Build to Deploy Redis

on:
  # we want pull requests so we can build(test) but not push to image registry
  push:
    branches:
      - 'main'
  #   # only build when important files change
  #   paths:
  #     - 'vote/**'
  #     #- '.github/workflows/call-docker-build-vote.yaml'
  # pull_request:
  #   branches:
  #     - 'main'
  #   # only build when important files change
  #   paths:
  #     - 'vote/**'
  #     #- '.github/workflows/call-docker-build-vote.yaml'

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GAR_LOCATION: us-central1 # TODO: update region of the Artifact Registry
  GKE_CLUSTER: dadismad-cluster-1    # TODO: update to cluster name
  GKE_ZONE: us-central1  # TODO: update to cluster zone
  DEPLOYMENT_NAME: redis-deployment # TODO: update to deployment name
  REPOSITORY: dadismad # TODO: update to Artifact Registry docker repository
  IMAGE: redis
  IMAGE_TAG: latest
  WORKING_DIRECTORY: redis #also used as an egg



jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    
    environment: dadismad-gke # numbskull.. you have to update the environment the variables are coming from. 
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        sparse-checkout: |
          sysdig-cli-scanner
          k8s-specifications/${{ env.WORKING_DIRECTORY }}-deployment.yaml
          k8s-specifications/${{ env.WORKING_DIRECTORY }}-service.yaml
        sparse-checkout-cone-mode: false

    #Scanning Infrastructure 
    - name: Scan infrastructure
      uses: sysdiglabs/scan-action@v5
      with:
        sysdig-secure-token: ${{ secrets.SECURE_API_TOKEN }}
        sysdig-secure-url: ${{ secrets.SYSDIG_SECURE_URL }}
        cli-scanner-version: 1.9.0
        mode: iac
        iac-scan-path: ./
        recursive: true

    # Configure Workload Identity Federation and generate an access token.
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v2'
      with:
        token_format: 'access_token'
        workload_identity_provider: 'projects/250238953270/locations/global/workloadIdentityPools/dadismad/providers/dadismad-github'
        service_account: 'dadismad-github-actions@macro-truck-198415.iam.gserviceaccount.com'



    - name: Echo stuff
      run: printenv


    - name: Docker configuration
      run: |-
        echo ${{steps.auth.outputs.access_token}} | docker login -u oauth2accesstoken --password-stdin https://$GAR_LOCATION-docker.pkg.dev
    # Get the GKE credentials so we can deploy to the cluster
    - name: Set up GKE credentials
      uses: google-github-actions/get-gke-credentials@v2
      with:

        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}

    #Scanning remote database
    - name: Scan image
      uses: sysdiglabs/scan-action@v5
      with:
          image-tag: "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ env.IMAGE_TAG }}"
          sysdig-secure-token: ${{ secrets.SECURE_API_TOKEN }}
          sysdig-secure-url: ${{ secrets.SYSDIG_SECURE_URL }}

    # K8 File configuration
    - name: Stating context to cluster
      run: kubectl config current-context
    - uses: swdotcom/update-and-apply-kubernetes-configs@v1
      with:
        k8-config-file-paths: |
          k8s-specifications/${{ env.WORKING_DIRECTORY }}-deployment.yaml
          k8s-specifications/${{ env.WORKING_DIRECTORY }}-service.yaml
        replacement-method: defined
      env:
        IMAGE_TAG: ${{ env.IMAGE_TAG }}
       # CHANGE_CAUSE: ${{ github.event.release.tag_name }}

